import { loginSuccessAddToken } from "../../../Store/Slices/UserSlice";

const refreshToken = async (dispatch) => {
  const storedRefreshToken = localStorage.getItem("refreshToken");
  if (!storedRefreshToken) {
    console.error("–ù–µ—Ç refreshToken –≤ localStorage");
    return null;
  }

  const url = "http://51.250.108.190:8080/api/auth/refresh";

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${storedRefreshToken}`, 
        "Content-Type": "application/json"
      },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.statusText}`);
    }

    const contentType = response.headers.get("Content-Type");

    if (contentType && contentType.includes("text/plain")) {
      const newAccessToken = await response.text(); 
      console.log("üîÑ –ù–æ–≤—ã–π access —Ç–æ–∫–µ–Ω:", newAccessToken);

      localStorage.setItem("accessToken", newAccessToken);
      dispatch(loginSuccessAddToken(newAccessToken));
      return newAccessToken;
    } else {
      throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ text/plain.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    return null;
  }
};

export { refreshToken };
