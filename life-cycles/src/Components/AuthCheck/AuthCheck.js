import { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { loginSuccessAddToken } from '../../Store/Slices/UserSlice';
import {
  changeStartTimestamp,
  changeStepsInStore,
  changeCoordinatesInStore,
  changeNotificationsInStore,
  changeHeartbeatInStore,
  changeCaloriesInStore,
  changeActiveMinutesInStore
} from '../../Store/Slices/ChangebleLifeDataSlice';
import { refreshToken } from '../EntranceForm/LoginForm/authService';

export function AuthCheck() {
  const dispatch = useDispatch();
  const token = useSelector((state) => state.user.tokenAuthorization);

  const fetchWithRefresh = async (url, currentToken) => {
    let res = await fetch(url, {
      headers: { Authorization: `Bearer ${currentToken}` },
    });
    if (res.status === 401) {
      const refreshed = await refreshToken(dispatch);
      if (refreshed) {
        res = await fetch(url, {
          headers: { Authorization: `Bearer ${refreshed}` },
        });
      }
    }
    if (!res.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${url}, —Å—Ç–∞—Ç—É—Å ${res.status}`);
    }
    return res.json();
  };

  const fetchAllMetrics = async (currentToken) => {
    const stop = new Date().toISOString();
    const start = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString();

    console.log("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç—Ä–∏–∫...");

    try {
      // Steps
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=steps`;
        console.log("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —à–∞–≥–∏...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => ({
          timestamp,
          value: Number(value),
        }));
        if (data.length > 0) {
          dispatch(changeStartTimestamp(data[0].timestamp));
        }
        dispatch(changeStepsInStore(data));
        console.log("‚úÖ –®–∞–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      // Coordinates
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=coordinates`;
        console.log("üìç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => {
          const [lat, lng] = value.split(":").map(Number);
          return { timestamp, coords: [lat, lng] };
        });
        dispatch(changeCoordinatesInStore(data));
        console.log("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      // Notifications
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=notification`;
        console.log("üîî –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => ({ timestamp, value }));
        dispatch(changeNotificationsInStore(data));
        console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      // Heartbeat
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=heartbeat`;
        console.log("‚ù§Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—É–ª—å—Å...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => ({
          timestamp,
          value: parseFloat(value),
        }));
        dispatch(changeHeartbeatInStore(data));
        console.log("‚úÖ –ü—É–ª—å—Å –∑–∞–≥—Ä—É–∂–µ–Ω:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      // Calories
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=calories`;
        console.log("üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–∞–ª–æ—Ä–∏–∏...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => ({
          timestamp,
          value: Number(value),
        }));
        dispatch(changeCaloriesInStore(data));
        console.log("‚úÖ –ö–∞–ª–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      // Active Minutes
      {
        const url = `/api/proxy?start=${start}&stop=${stop}&metricType=active_minutes`;
        console.log("‚è±Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã...");
        const raw = await fetchWithRefresh(url, currentToken);
        const data = raw.map(({ timestamp, value }) => ({
          timestamp,
          value: Number(value),
        }));
        dispatch(changeActiveMinutesInStore(data));
        console.log("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.length, "–∑–∞–ø–∏—Å–µ–π");
      }

      console.log("‚ú® –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");

    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫:", err.message);
    }
  };

  useEffect(() => {
    const savedToken = localStorage.getItem("accessToken");
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω...");
    if (savedToken) {
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
      dispatch(loginSuccessAddToken(savedToken));
    } else {
      console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  }, [dispatch]);

  useEffect(() => {
    console.log("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ store...");
    if (token) {
      console.log("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ store, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç—Ä–∏–∫");
      fetchAllMetrics(token);
    } else {
      console.log("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ store");
    }
  }, [token]);

  return null;
} 